#!/usr/bin/env python3
#vim: set filetype=python

import sys
import socket

# Auxiliary functions

def initialParams():
    import argparse
    "Sets up the initial Central Server ip and port"
    parser = argparse.ArgumentParser(sys.argv[1:])
    parser.add_argument('-n', help='Central Server name', default='localhost')
    parser.add_argument('-p', help='Central Server port', default='58004')
    args = parser.parse_args()
    return args

def readCommand():
    try:
        listAvailableCommands()
        command = input("$ ")
        tokens = command.split(' ')
        if len(tokens) > 0 and isValidCommand(tokens[0]):
            #pass every token
            executeCommand(tokens)

    except EOFError:
        pass

def isValidCommand(command = ""):
    return command in valid.keys()

def executeCommand(command):
    """Execute the command based on the command supplied as input and pass
    the remaining arguments.
    Each command decides how to manage the several tokens"""
    valid.get(command[0])(command)

def makeProtocolString(*command):
    ret =  ' '.join(command)
    return ret + '\n'

def printDirContent(arg, dirname):
    pass

def handleFilelist(arg, directory):
    from re import findall as f

    reply = arg.decode('utf8')
    tokens = reply.split(' ', 4)
    status, BSip, BSport, N, filelist = tokens
    N = int(N)
    #see the pattern in the specification
    ex = '\w*\s\d{2}\.\d{2}\.\d{4}\s\d{2}\:\d{2}\:\d{2}\s\d*'
    files = f(ex, filelist)

    if status == 'LFD' and N > 0 and len(files) == N:
        print('List of files in directory {0}, hosted at {1}:{2}:'.format(directory, BSip, BSport))
        for filename in files:
            print(filename)
            #print('\t- {}'.format(filename))
    else:
        printf('No directories to display')

def handleDirlist(arg):
    tokens = arg.decode('utf8').split(' ')
    if len(tokens) >= 2:
        amount = int(tokens[1])
    else:
        amount = 0
    if tokens[0] == 'LDR' and amount > 0:
#        if amount == len(tokens[2:]:
        print('List of directories:')
        for directory in tokens[2:]:
            print('\t- {}'.format(directory))
    else:
        printf('No directories to display')

def getDirContent(dir):
    pass

def validateUser(user):
    return len(user) == 5 and user.isdigit()

def validatePassword(password):
    return len(password) == 8 and password.isalnum()

def setCredentials(args):
    u = args[0]
    p = args[1]
    if validateUser(u) and validatePassword(p):
        global user, password
        user = u
        password = p
        return True
    else:
        return False

def isLoggedIn():
    return user != "" and password != ""

def listAvailableCommands():
    "Lists the available commands to the user in Standard Output"
    print("", "Available Commands:", sep="\n")
    if isLoggedIn():
        print("\t",
                "deluser",
                "backup dir",
                "restore dir",
                "dirlist",
                "filelist dir",
                "delete dir",
                "logout",
                sep="\n\t")
    else:
        print("\tlogin user pass")
    print("\texit")

def call(socket, message ):
    buffer_size = 4096
    chunks = []
    bytes_rec = 0
    ret = NOK

    #Send our request (after converting it to bytes)
    socket.sendall(str.encode(message))

    #keep reading the response
    while bytes_rec < buffer_size:
        data = socket.recv(buffer_size)
        #the server closed the connection, i.e., there is
        #no more data to be received
        if data == b'':
            break
        #print(data.decode())

        chunks.append(data)
        bytes_rec = bytes_rec + len(data)
        # we got the final '\n' so this was the last message
        if data.endswith(b'\n'):
            break

    ret = b''.join(chunks).strip()

    print(ret)
    return ret

def loginAux(socket):
    message = makeProtocolString("AUT", user, password)
    return call(socket, message)

############################################
# User API

def login(args):
    "Login with user and pass"
    if not isLoggedIn() and len(args) == 3:
        success = setCredentials(args[1:])
        if not success:
            print("""The username must be a 5 digits number and the password must be composed
            of 8 alphanumeric characters""")
            return

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            #perform service call
            status = loginAux(s)

            if status == b"AUR OK":
                pass
            elif status == b"AUR NOK":
                #clean up
                logout(None)
            elif status == b"AUR NEW":
                pass
            elif b"ERR" in status:
                logout(None)
                print("Malformed request")
            return status
    except ConnectionRefusedError:
        print("Error in connecting to socket on port: ", CS[1])

def deluser(args):
    "Deletes this user from the server"
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            if loginAux(s) == b"AUR OK":
                ret = call(s, makeProtocolString("DLU"))
                if ret == b"DLR OK":
                    logout(None)
                elif ret == b"DLR NOK":
                    print("Error: Could not delete the current user")
                elif b"ERR" in ret:
                    print("Malformed request")
            else:
                print("Error: Could not delete the current user")
    except ConnectionRefusedError:
        print("Error in connecting to socket on port: ", CS[1])

def backup(args):
    "Performs a backup of directory dir"
    pass

def restore(args):
    "Restores the directory dir"
    pass

def dirlist(args):
    "Lists all the directories"
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            if loginAux(s) == b"AUR OK":
                ret = call(s, makeProtocolString("LSD"))
                if b"ERR" in ret:
                    print("Malformed request")
                else:
                   handleDirlist(ret)
            else:
                print("Error: wrong credentials")
    except ConnectionRefusedError:
        print("Error in connecting to socket on port: ", CS[1])

def filelist(args):
    "Lists all the files in the directory dir"
    if len(args) != 2:
        print("You need to supply a directory.")
        return

    dire = args[1]
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            if loginAux(s) == b"AUR OK":
                ret = call(s, makeProtocolString("LSF", dire))
                if b"ERR" in ret:
                    print("Malformed request")
                elif ret == b'LFD NOK':
                    print("Filelist request cannot be served")
                else:
                   handleFilelist(ret, dire)
            else:
                print("Error: wrong credentials")
    except ConnectionRefusedError:
        print("Error in connecting to socket on port: ", CS[1])

def delete(args):
    "Deletes directory dir"
    pass

def logout(args):
    "Logs out the current logged user"
    #maybe have a variable with the current user since we need to perform
    #a login with EVERY COMMAND
    global user
    user = ""
    global password
    password = ""

def exit(args):
    "Exits the application"
    #Perform any clean up necessary
    global keepGoing
    keepGoing = False
    print("exit")


############################################
# Global variables
###########################################
#Return codes
OK = "OK"
NOK = "NOK"
NEW = "NEW"

# valid commands and their respective implementation
valid = { "login": login,
        "deluser": deluser,
        "backup": backup,
        "restore": restore,
        "dirlist": dirlist,
        "filelist": filelist,
        "delete": delete,
        "logout": logout,
        "exit": exit }

# Entry Point
keepGoing = True

# User and password
user = ""
password = ""

# Central Server location
CS = ()
# Backup Server location
#BS = ()
############################################

def main():
    u = initialParams() #access u.n and u.p
    global CS
    CS = (socket.gethostbyname(u.n), int(u.p))

    while keepGoing:
        readCommand()


if __name__ == "__main__":
    main()
