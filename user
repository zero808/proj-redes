#!/usr/bin/env python3
#vim: set filetype=python

import sys
import socket

# Auxiliary functions

def initialParams():
    import argparse
    "Sets up the initial Central Server ip and port"
    parser = argparse.ArgumentParser(sys.argv[1:])
    parser.add_argument('-n', help='Central Server name', default='localhost')
    parser.add_argument('-p', help='Central Server port', default='58004')
    args = parser.parse_args()
    return args

def readCommand():
    try:
        listAvailableCommands()
        command = input("$ ")
        tokens = command.split(' ')
        if len(tokens) > 0 and isValidCommand(tokens[0]):
            #pass every token
            executeCommand(tokens)

    except EOFError:
        pass

def isValidCommand(command = ""):
    return command in valid.keys()

def executeCommand(command):
    """Execute the command based on the command supplied as input and pass
    the remaining arguments.
    Each command decides how to manage the several tokens"""
    valid.get(command[0])(command)

def makeProtocolString(*command):
    ret =  ' '.join(command)
    return ret + '\n'

def handleFilelist(arg, directory):
    from re import findall as f

    reply = arg.decode('utf8')
    tokens = reply.split(' ', 4)
    status, BSip, BSport, N, filelist = tokens
    N = int(N)
    #see the pattern in the specification
    ex = '\w*\.\w*\s\d{2}\.\d{2}\.\d{4}\s\d{2}\:\d{2}\:\d{2}\s\d*'
    files = f(ex, filelist)

    if status == 'LFD' and N > 0 and len(files) == N:
        print('List of files in directory {0}, hosted at {1}:{2}:'.format(directory, BSip, BSport))
        for filename in files:
            print(filename)
            #print('\t- {}'.format(filename))
    else:
        print('No directories to display')

def handleDirlist(arg):
    tokens = arg.decode('utf8').split(' ')
    if len(tokens) >= 2:
        amount = int(tokens[1])
    else:
        amount = 0
    if tokens[0] == 'LDR' and amount > 0:
#        if amount == len(tokens[2:]:
        print('List of directories:')
        for directory in tokens[2:]:
            print('\t- {}'.format(directory))
    else:
        print('No directories to display')

def timestampToString(ts):
    out = ts.strftime('%d.%m.%Y %H:%M:%S')
    return out

def getDirContent(diri):
    import os
    import fileinput
    import datetime

    currentPath = ''.join([os.getcwd(), os.sep, diri])
    filesContent = {}

    #FIXME we do not want to read all the files, just the subset
    #sent by the CS!!!
    #we might need a function to get the filenames and all the metadata
    #and another for the contents
    try:
        #change directory to avoid having to build a string with
        #the absolute path to the file(s)
        os.chdir(diri)
        for filename in os.listdir(os.curdir):
            with open(filename, 'rb') as f:
                #save the content of the file
                fileContent = f.read()
                #get the size in bytes and time of last modification
                stat = os.lstat(filename)
                fileSize = stat.st_size
                timestamp = datetime.datetime.fromtimestamp(stat.st_mtime)
                #associate a filename with all the relevant information
                filesContent[filename] = (fileContent, fileSize, timestampToString(timestamp))

        os.chdir(os.pardir) #go back
    except (OSError, FileNotFoundError, OverflowError) as err:
        print('OS error: {0}'.format(err))

    return filesContent

#backup
def backupCSRequest(dirname, N, dirBytes):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            if loginAux(s) == LOGIN_SUCCESS:

                ret = call(s, makeProtocolString("BCK", dirname, str(N), dirBytes))
                if EOF in ret:
                    print("Cannot answer the request")
                elif ERROR in ret:
                    print("Malformed request")
                else:
                    return ret

            elif ERROR in ret:
                print("Malformed request")
            else:
                print("Error: Could not backup the directory {}".format(dirname))
    except ConnectionRefusedError:
        print("Error in connecting to socket on port: ", CS[1])

def backupBSRequest(dirname, N, dirBytes):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(BS)
            s.settimeout(20)
            if loginAux(s) == LOGIN_SUCCESS:
                
                t = b' '.join([b'UPL', dirname.encode(), bytes(str(N), 'utf-8'), dirBytes])
                ret = call(s, t)
                if EOF in ret:
                    print("Cannot answer the request")
                elif ERROR in ret:
                    print("Malformed request")
                elif ret == b'UPR OK':
                    print("Backup of directory {} successful".format(dirname))
                else:
                    return ret

            #elif ERROR in ret:
            #    print("Malformed request")
            else:
                print("Error: Could not backup the directory {}".format(dirname))
    except (ConnectionRefusedError, socket.timeout):
        print("Error in connecting to socket on port: ", CS[1])

def processCSReply(message, fileContents):
    from re import findall as f
    
    message_str = message.decode()

    separator = '\s'
    ip = '\\d*\\.\\d*\\.\\d*\\.\\d*\\s\\d*'
    #filename = '\\w*\\.\\w*|\\w*' #returns a list???
    filename = '\\w*\\.\\w*'
    filecount = '\d*'
    datetime = '\d{2}\.\d{2}\.\d{4}\s\d{2}\:\d{2}\:\d{2}'
    size = '\d*'
    #fileData = '\w*'
    mandatory = separator.join([ip, filecount])

    results = f(mandatory, message_str)
    if not len(results) > 0:
        return
    tokens = results[0].split(' ')
    
    global BS
    BS = (socket.gethostbyname(tokens[0]), int(tokens[1]))
    ret = tokens[2]
    N = int(ret)
    result = []

    if N > 0:
        # 5 = 'BKR' + 2 * ' '
        files = f(separator.join([filename, datetime, size]), message_str[5 + len(results[0]):])
        if len(files) == N:
            aux = N
            for item in files:
                fname = item.split(' ')[0]
                #to avoid mixing strs and bytes, encode it right away
                result.append(item.encode())
                #we need an extra space, to separate the conntents
                result.append(b' ')
                #search for the entry for this file and get it's data
                result.append(fileContents[fname][0])
                if aux > 1:
                    #we need an extra space, to separate files
                    result.append(b' ')
                    aux -= 1

    result.append(b'\n')
    return b''.join(result)

# restore
def restoreDirCSrequest(dirname):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            s.settimeout(20)
            if loginAux(s) == LOGIN_SUCCESS:
                ret = call(s, makeProtocolString("RST", dirname))
                if EOF in ret:
                    print("Error: Could not restore the directory {}".format(dirname))
                    return None
                elif ERROR in ret:
                    print("Malformed request")
                    return None
                else:
                    return ret.decode().split(" ")[1:]
            else:
                print("Error: Could not login")
    except (ConnectionRefusedError, socket.timeout):
        print("Error in connecting to socket on port: ", CS[1])
        
def restoreDirBSrequest(dirname):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(BS)
            s.settimeout(20)
            if loginAux(s) == LOGIN_SUCCESS:
                st = makeProtocolString("RSB", dirname)
                ret = downloadFiles(s, st)
                if ret is None:
                    return None
                elif EOF in ret:
                    print("Error: Could not restore the directory {}".format(dirname))
                    return None
                elif ERROR in ret:
                    print("Malformed request")
                    return None
                else:
                    return ret#.decode("ISO-8859-1").split(" ")[1:]
            else:
                print("Error: Could not login")
    except (ConnectionRefusedError, socket.timeout):
        print("Error in connecting to socket on port: ", BS[1])
        
def downloadFiles(socket, message):
    buffer_size = 4096
    chunks = []
    ret = NOK  
    
    #Send our request (after converting it to bytes)
    if isinstance(message, str):
        payload = message.encode()
    else:
        payload = message
    
    socket.sendall(payload)
    
    try:
        while True:
            data = socket.recv(buffer_size)
            #the server closed the connection, i.e., there is
            #no more data to be received
            if data == b'':
                break
            chunks.append(data)
    
            # we got the final '\n' so this was the last message
            #if data.endswith(b'\n'):
            #    break
    except ConnectionResetError as err:
        print('TCP error: {0}'.format(err))
    #        print("erro")
    
    ret = b''.join(chunks)#.strip()

    if not ret.endswith(b'\n'):
        print("Error downloading files")
        ret = None
    elif EOF in ret or ERROR in ret:
        print("Error")
        ret = None
    else:
        print(ret)

        #we can't use strip as it might remove whitespace that belongs to the file
    return ret#[:len(ret) - 1]
    
def createFiles(dirname, message):
    import os
    import fileinput
    import datetime    
    from re import findall as f
    
    separator= b'\s'
    filename = b'\\w*\\.\\w*'
    #filecount = b'\d*'
    datetime = b'\d{2}\.\d{2}\.\d{4}\s\d{2}\:\d{2}\:\d{2}'
    size = b'\d*'
    data = b'.*?\s'
    arr = [filename, datetime, size]
    reg = separator.join(arr)
    payload = b"a.txt 20.01.2018 12:12:12 14 asdkadakdaas b.txt 20.01.2018 12:12:12 15 asadada"
    indices = []
    N = f(b'RBR \d*', message)
    N = int(N[0].split(b' ')[1])

    if N > 0 and len(message) > 0:
        try:
            tokens = f(reg, message)
            #create the folder if it doesn't exist
            if not os.path.isdir(dirname):
                os.mkdir(dirname)
            os.chdir(dirname)            
            
            for fi in tokens:
                #calculate the position of the file contents in the message string
                indices.append(message.find(fi))
            
            for ix, tk in enumerate(indices):
                if ix < len(indices) - 1:
                    #get the substring between the start of the token and it's length
                    filecontent = message[tk + len(tokens[ix]):indices[ix+1]-1]
                else:
                    #if it's the last one just get the substring till the end
                    filecontent = message[tk + len(tokens[ix]) + 1:]
                    #remove the last \n
                    filecontent = filecontent[:len(filecontent)-1]
                
                #save the file
                with open(tokens[ix].split(b' ')[0], 'wb') as fp:
                    fp.write(filecontent)
            
            os.chdir(os.pardir)
        except:
            print('Error creating directory and files')
# ########

def stringifyDirlistCS(filesContent):
    result = []
    for item in filesContent.items():
        result.append(' '.join([item[0], item[1][2],  str(item[1][1])]))
    return ' '.join(result)

def validateUser(user):
    return len(user) == 5 and user.isdigit()

def validatePassword(password):
    return len(password) == 8 and password.isalnum()

def setCredentials(args):
    u = args[0]
    p = args[1]
    if validateUser(u) and validatePassword(p):
        global user, password
        user = u
        password = p
        return True
    else:
        return False

def isLoggedIn():
    return user != "" and password != ""

def listAvailableCommands():
    "Lists the available commands to the user in Standard Output"
    print("", "Available Commands:", sep="\n")
    if isLoggedIn():
        print("\t",
                "deluser",
                "backup dir",
                "restore dir",
                "dirlist",
                "filelist dir",
                "delete dir",
                "logout",
                sep="\n\t")
    else:
        print("\tlogin user pass")
    print("\texit")

def call(socket, message ):
    buffer_size = 4096
    chunks = []
    ret = NOK

    #Send our request (after converting it to bytes)
    if isinstance(message, str):
        payload = message.encode()
    else:
        payload = message

    socket.sendall(payload)

    try:
        while True:
            data = socket.recv(buffer_size)
            #the server closed the connection, i.e., there is
            #no more data to be received
            if data == b'':
                break
            chunks.append(data)

            # we got the final '\n' so this was the last message
            if data.endswith(b'\n'):
                break
    except ConnectionResetError as err:
        print('TCP error: {0}'.format(err))
#        print("erro")

    ret = b''.join(chunks).strip()

    print(ret)
    return ret

def loginAux(socket):
    message = makeProtocolString("AUT", user, password)
    return call(socket, message)

############################################
# User API

def login(args):
    "Login with user and pass"
    if not isLoggedIn() and len(args) == 3:
        success = setCredentials(args[1:])
        if not success:
            print("""The username must be a 5 digits number and the password must be composed
            of 8 alphanumeric characters""")
            return

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            s.settimeout(20)
            #perform service call
            status = loginAux(s)

            if status == LOGIN_SUCCESS:
                pass
            elif status == LOGIN_FAIL:
                #clean up
                logout(None)
            elif status == b"AUR NEW":
                pass
            elif ERROR in status:
                logout(None)
                print("Malformed request")
            return status
    except (ConnectionRefusedError, socket.timeout):
        print("Error in connecting to socket on port: ", CS[1])

def deluser(args):
    "Deletes this user from the server"
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            s.settimeout(20)
            if loginAux(s) == LOGIN_SUCCESS:
                ret = call(s, makeProtocolString("DLU"))
                if ret == b"DLR OK":
                    logout(None)
                elif ret == b"DLR NOK":
                    print("Error: Could not delete the current user")
                elif ERROR in ret:
                    print("Malformed request")
            else:
                print("Error: Could not delete the current user")
    except (ConnectionRefusedError, socket.timeout):
        print("Error in connecting to socket on port: ", CS[1])

def backup(args):
    "Performs a backup of directory dir"
    #dict with filaname : file contents
    #we will send the above two and len(dict[filename])
    dirname = args[1]
    dirFiles = getDirContent(dirname)
    dirBytes = stringifyDirlistCS(dirFiles)
    N = len(dirFiles.keys())

    #send the list of files
    ret = backupCSRequest(dirname, N, dirBytes)
    #save the subset of the files that will actually be transmitted
    dirBytes = processCSReply(ret, dirFiles)
    #send the files
    backupBSRequest(dirname, N, dirBytes)

def restore(args):
    "Restores the directory dir"
    dirname = args[1]
    ret = restoreDirCSrequest(dirname)
    if ret is None:
        return
    
    global BS
    BS = (ret[0], int(ret[1]))
    ret = restoreDirBSrequest(dirname)
    if ret is None:
        return
    createFiles(dirname, ret)

def dirlist(args):
    "Lists all the directories"
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            s.settimeout(20)
            if loginAux(s) == LOGIN_SUCCESS:
                ret = call(s, makeProtocolString("LSD"))
                if ERROR in ret:
                    print("Malformed request")
                else:
                    handleDirlist(ret)
            else:
                print("Error: wrong credentials")
    except (ConnectionRefusedError, socket.timeout):
        print("Error in connecting to socket on port: ", CS[1])

def filelist(args):
    "Lists all the files in the directory dir"
    if len(args) != 2:
        print("You need to supply a directory.")
        return

    dire = args[1]
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            s.settimeout(20)
            if loginAux(s) == LOGIN_SUCCESS:
                ret = call(s, makeProtocolString("LSF", dire))
                if ERROR in ret:
                    print("Malformed request")
                elif ret == b'LFD NOK':
                    print("Filelist request cannot be served")
                else:
                    handleFilelist(ret, dire)
            else:
                print("Error: wrong credentials")
    except (ConnectionRefusedError, socket.timeout):
        print("Error in connecting to socket on port: ", CS[1])

def delete(args):
    "Deletes directory dir"
    if len(args) != 2:
        print("You need to supply a directory.")
        return

    dire = args[1]
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect(CS)
            s.settimeout(20)
            if loginAux(s) == LOGIN_SUCCESS:
                ret = call(s, makeProtocolString("DEL", dire))
                if ERROR in ret:
                    print("Malformed request")
                elif ret == b'DDR NOK':
                    print("Error: Cannot delete directory {}".format(dire))
                elif ret == b'DDR OK':
                    print("Successfully deleted directory {}".format(dire))
            else:
                print("Error: wrong credentials")
    except (ConnectionRefusedError, socket.timeout):
        print("Error in connecting to socket on port: ", CS[1])

def logout(args):
    "Logs out the current logged user"
    #maybe have a variable with the current user since we need to perform
    #a login with EVERY COMMAND
    global user
    user = ""
    global password
    password = ""

def exit(args):
    "Exits the application"
    #Perform any clean up necessary
    global keepGoing
    keepGoing = False
    print("exit")


############################################
# Global variables
###########################################
#Return codes
LOGIN_SUCCESS = b'AUR OK'
LOGIN_FAIL = b'AUR NOK'
ERROR = b'ERR'
EOF = b'EOF'
NOK = "NOK"
NEW = "NEW"

# valid commands and their respective implementation
valid = { "login": login,
        "deluser": deluser,
        "backup": backup,
        "restore": restore,
        "dirlist": dirlist,
        "filelist": filelist,
        "delete": delete,
        "logout": logout,
        "exit": exit }

# Entry Point
keepGoing = True

# User and password
user = ""
password = ""

# Central Server location
CS = ()
# Backup Server location
BS = ()
############################################

def main():
    u = initialParams() #access u.n and u.p
    global CS
    CS = (socket.gethostbyname(u.n), int(u.p))

    while keepGoing:
        readCommand()


if __name__ == "__main__":
    main()
